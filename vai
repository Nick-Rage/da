#!/tools/batonroot/rodin/engkits/lnx64/python-3.8.3_designAnalysis/bin/python

#===============================================================================#
# python script to read the data from design_analysis.rpt & vivado.log files and update that in confluence page.
#===============================================================================#

pythonPath = '/tools/batonroot/rodin/engkits/lnx64/python-3.8.3_designAnalysis/bin/python'
# check python and module availability before executing the code & import modules if they exist
import os, sys
if not os.path.exists(pythonPath):
  sys.exit(f'Error: Python path {pythonPath} does not exists. Contact IT to get it installed & try again.')
modules = ['pathlib', 'datetime', 'argparse', 're', 'atexit', 'json', 'getpass', 'itertools']
notFound = 0
for module in modules:
  try:
    exec(f'import {module}')
  except:
    notFound += 1
    print(f'Error: Module {module} not found, but can be installed with:\n{pythonPath} -m pip install {module}\nOr contact IT to get it installed & try again')
try:
  from atlassian import Confluence
except:
  notFound += 1
  print(f'Error: Module atlassian not found, but can be installed with:\n{pythonPath} -m pip install atlassian-python-api\nOr contact IT to get it installed & try again')
if notFound:
  sys.exit()

# connect to confluence page
def connect():
  url = "https://confluence.xilinx.com/"
  verify = "/etc/pki/tls/certs/ca-bundle.crt"
  for i in range(3):
    confluence = Confluence(url=url, username=os.getlogin(), password=getpass.getpass(prompt = "Password: "), verify_ssl=verify)
    try:
      softwareSpaceTitle = get_page_title(pageID=2064481, confluence=confluence)		# test whether confluence login is successful or not
      break
    except:
      if i == 2:
        sys.exit(f'Error: Too many unsuccessful attempts.\nUnable to login to confluence. This may be due to wrong password or you are unable to access https://confluence.xilinx.com/display/XSW/Portal page.')
      print("Warning: Incorrect password!!!, Try again.")
  return confluence

# connect to confluence page through dabusr account
def dabusrConnect():
  url = "https://confluence.xilinx.com/"
  verify = "/etc/pki/tls/certs/ca-bundle.crt"
  confluence = Confluence(url=url, username='dabusr', password='!GoogleProfiler123', verify_ssl=verify)
  try:
    softwareSpaceTitle = get_page_title(pageID=2064481, confluence=confluence)          # test whether confluence login is successful or not
  except:
    sys.exit(f'Error: unable to login to confluence. This may be due to wrong password or dabusr is unable to access https://confluence.xilinx.com/display/XSW/Portal page.')
  return confluence

# create/overwrite/append the confluence page & return the page details
def updateConfluence(pageTitle, body, confluence, pageID=None, parentPageID=None, pageAction='create'):
  # ======== get the space, where page with id=parentPageID or id=pageID exists ======== #
  try:
    space = confluence.get_page_space(pageID) if pageID is not None else confluence.get_page_space(parentPageID)
  except:
    if pageAction == "create":
      sys.exit('Error: parentPageID is required to create a new page.')
    else:
      sys.exit("Error: any of the page's (parent page or the page you want to edit) id is required.")
  # ==================================================================================== #
  if pageAction == "create":
    try:
      confluence.create_page(space=space, title=pageTitle, body=body, parent_id=parentPageID)
    except:
      print(f'Warning: Either page with title {pageTitle} already exists or something is wrong in HTML code of body you want to upload.\nUser Action: Try to overwrite the page in case of page already exists.')
  try:
    if pageID is None:
      pageID = confluence.get_page_id(space, pageTitle)					# get the page id of the titled page
  except:
    pass
  try:
    if pageAction == "overwrite":
      confluence.update_page(page_id=pageID, title=pageTitle, body=body, parent_id=parentPageID)
    elif pageAction == "append":
      confluence.append_page(page_id=pageID, title=pageTitle, append_body=body, parent_id=parentPageID)
    elif pageAction == "prepend":
      confluence.prepend_page(page_id=pageID, title=pageTitle, prepend_body=body, parent_id=parentPageID)
  except:
    print(f'Warning: Page with title {pageTitle} does not exist.\nAction taken: Creating new page with title {pageTitle}.')
    try:
      confluence.create_page(space=space, title=pageTitle, body=body, parent_id=parentPageID)
    except:
      print(f'Warning: Either page with title {pageTitle} already exists or something is wrong in HTML code of body you want to upload.\nUser Action: Try to overwrite the page in case of page already exists.')
    pageID = confluence.get_page_id(space, pageTitle)                  # get the page id of the titled page
  return confluence.get_page_by_id(pageID)

# return the title of the confluence page of page_id=pageID
def get_page_title(pageID, confluence):
    pageProperties = confluence.get_page_by_id(pageID)
    return pageProperties['title']

# validate the page title, change the page title on user request if page with title already exists
def validatePageTitle(confluence, parentPageID, pageTitle):
  tempTitle = pageTitle
  num = 1
  childPagesList = confluence.get_child_title_list(parentPageID)
  if tempTitle in childPagesList:
    print('Similar confluence pages with following titles already exists:')
  while tempTitle in childPagesList:
    print(tempTitle)
    num += 1
    tempTitle = f'{pageTitle} #{num}'
  if num > 1:
    for i in range(3):
      choice = input('Do you want to create a new page?\n')
      if choice in ['y', 'Y', 'yes', 'Yes', 'YES']:
        break
      elif choice in ['n', 'N', 'no', 'No', 'NO']:
        sys.exit()
      else:
        if i == 2:
          sys.exit("Too many unsuccessful attempts.")
        print('Warning: Invalid choice!!!\tTry again.')
  return tempTitle

# return html code of individual table from dictionary of table data
def dict2table(tableDesign1, nameDesign1, tableDesign2=None, nameDesign2=None):
  indent = '  '
  tableData = ''
  if not tableDesign1:
    tableData += f'\n{indent*12}<pre style="color:orange;">\n!!! Data not available {f"for {nameDesign1} " if nameDesign2 else ""}!!!\n{indent*12}</pre>'
  if (not tableDesign2) and nameDesign2:
    tableData += f'\n{indent*12}<pre style="color:orange;">\n!!! Data not available for {nameDesign2} !!!\n{indent*12}</pre>'
  if tableDesign1 or tableDesign2:
    colHeads1 = tableDesign1["colHeads"].copy() if tableDesign1 else [] # column headings in table 1
    colHeads2 = tableDesign2["colHeads"].copy() if tableDesign2 else [] # column headings in table 2
    # columnHeadings = list(set(colHeads1) | set(colHeads2)) # Union of 2 lists without repetition (order not maintained)
    columnHeadings = []
    for colHead in colHeads1 + colHeads2:
      if colHead not in columnHeadings: columnHeadings.append(colHead) # Union of 2 lists without repetition with maintained order same as in colHeads1 + colHeads2
    if tableDesign1: del tableDesign1["colHeads"]
    if tableDesign2: del tableDesign2["colHeads"]
    """
      delete "colHeads" data from tableDesign1 & tableDesign2 as these have list type data, but the code ahead is to access other keys data in tableDesign1 & tableDesign2, is to access dictionary data which may produce error for "colHeads" key
    """
    colHeadsSpan3 = ["Used", "Total", "Percentage", "Value", "Slack", "TNS", "Elapsed Time", "Peak Virtual Memory"]
    tableData += f'\n{indent*12}<table class="confluenceTable">\n{indent*13}<tr>\n{indent*14}<th>{columnHeadings[0]}</th>' # 1st column for row headings is of single colspan
    for columnHeading in columnHeadings[1:]:
      if nameDesign2: # nameDesign2 != None if tableDesign2 != None, but tableDesign2 may be {} empty in some cases, so used condition in nameDesign2
        tableData += f'\n{indent*14}<th colspan="3">{columnHeading}</th>' if columnHeading in colHeadsSpan3 else f'\n{indent*14}<th colspan="2">{columnHeading}</th>'
      else:
        tableData += f'\n{indent*14}<th>{columnHeading}</th>'
    tableData += f'\n{indent*13}</tr>'
    if nameDesign2: # table 2 is there
      tableData += f'\n{indent*13}<tr>\n{indent*14}<th>&nbsp;</th>'
      for columnHeading in columnHeadings[1:]:
        tableData += f'\n{indent*14}<th>{nameDesign1}</th>\n{indent*14}<th>{nameDesign2}</th>'
        if columnHeading in colHeadsSpan3:
          tableData += f'\n{indent*14}<th>Delta</th>'
      tableData += f'\n{indent*13}</tr>'
    rowHeads1 = list(tableDesign1.keys()) if tableDesign1 else [] # row headings in table 1
    rowHeads2 = list(tableDesign2.keys()) if tableDesign2 else [] # row headings in table 2
    rowHeadings = []
    for rowHead in rowHeads1 + rowHeads2:
      if rowHead not in rowHeadings: rowHeadings.append(rowHead) # get all the possible row headings as per data of both the tables
    for rowHeading in rowHeadings:
      tableData += f'\n{indent*13}<tr>\n{indent*14}<td style="background-color:#EEEEF0;">{re.sub(" #[0-9]+$", "", rowHeading)}</td>' # remove " #[0-9]+" pattern like " #43" form the end of rowHeading
      if rowHeading not in rowHeads1:
        tableDesign1[rowHeading] = {columnHeading:"-" for columnHeading in columnHeadings}
      if (rowHeading not in rowHeads2) and nameDesign2: # if table 2 is there but no data for row heading=<rowHeading>
        tableDesign2[rowHeading] = {columnHeading:"-" for columnHeading in columnHeadings} # add empty row in table 2 of row heading=<rowHeading>
      for columnHeading in columnHeadings[1:]:
        tableData += f'\n{indent*14}<td>{tableDesign1[rowHeading][columnHeading]}</td>'
        if nameDesign2: # table 2 is there
          tableData += f'\n{indent*14}<td>{tableDesign2[rowHeading][columnHeading]}</td>'
          if columnHeading in colHeadsSpan3:
            try:
if columnHeading == "Elapsed Time":
                multipliers = [3600, 60, 1] # [3600 sec/hr, 60 sec/min, 1 sec/sec]
                elapTime1 = re.findall("\d+", tableDesign1[rowHeading][columnHeading]) # elapTime1 = [HH1, MM1, SS1]
                elapTime2 = re.findall("\d+", tableDesign2[rowHeading][columnHeading]) # elapTime2 = [HH2, MM2, SS2]
                value1 = sum([m*int(t) for m, t in zip(multipliers, elapTime1)])
                value2 = sum([m*int(t) for m, t in zip(multipliers, elapTime2)])
              else:
                powOf10 = {"F": 15, "T": 12, "G": 9, "M": 6, "K": 3, "m": -3, "u": -6, "n": -9, "p": -12}
                value1 = float(re.search("[0-9.]+", tableDesign1[rowHeading][columnHeading]).group())
                value2 = float(re.search("[0-9.]+", tableDesign2[rowHeading][columnHeading]).group())
                for key in powOf10:
                  if re.search(f'.+{key}.+', tableDesign1[rowHeading][columnHeading]): value1 *= pow(10, powOf10[key])
                  if re.search(f'.+{key}.+', tableDesign2[rowHeading][columnHeading]): value2 *= pow(10, powOf10[key])
              delta = value2 - value1 if columnHeading == "Percentage" else ((value2 / value1) - 1) * 100
              tableData += f'\n{indent*14}<td style=\"background-color:#{"D5FFE5" if delta < 0 else "FFC0D0"};\">{"%.2f"%delta} %</td>' if delta else f'\n{indent*14}<td>{"%.2f"%delta} %</td>' # set some background color to Delta cell based on delta value
            except:
              tableData += f'\n{indent*14}<td>&minus;</td>'
      tableData += f'\n{indent*13}</tr>'
    tableData += f'\n{indent*12}</table>'
  return tableData

# return html code of confluence page by reading pageData dictionary
def pageData2html(confluence, dataDesign1, dataDesign2=None, comparativePageID=None, pageAction='create'):
  indent = "  "
  nameDesign1 = dataDesign1["Design"]
  if dataDesign2:
    nameDesign2 = dataDesign2["Design"]
  pageIndex = f'\n{indent*2}<p>\n{indent*3}<ac:structured-macro ac:macro-id="42343ded-5643-47ce-922c-5a9035a7c8f0" ac:name="toc" ac:schema-version="1"/>\n{indent*2}</p>\n{indent*2}<br/>'
  # ========== setting up an hyperlink inside HTML macro to Expand/Collapse all the expandable content in the page ========== #
  expandCollapseAll = f'\n{indent*2}<hr/>\n{indent*2}<br/>\n{indent*2}<ac:structured-macro ac:macro-id="8205dd91-49bd-4dd5-ba8d-6658983b8c46" ac:name="html" ac:schema-version="1">\n{indent*3}<ac:plain-text-body>\n{indent*4}<![CDATA[<a href=\'javascript:(function()%7B%24(".expand-control").each(function()%7B %24(this).trigger("click")%3B%7D)%7D)()\'>Expand/Collapse All</a>]]>\n{indent*3}</ac:plain-text-body>\n{indent*2}</ac:structured-macro>'
  # ========================================================================================================================= #
  pageProperties = f'''
  <ac:structured-macro ac:macro-id="513c3bae-58a1-44a5-83e4-dc091ddfa0a8" ac:name="details" ac:schema-version="1"><ac:rich-text-body><p class="auto-cursor-target"><br/></p><table><colgroup><col/><col/><col/></colgroup><tbody>'''
  for matrix in dataDesign1["Properties"]:
    pageProperties += f'\n{indent*5}<tr>\n{indent*6}<th>\n{indent*7}<span style="color: rgb(23,43,77);">{matrix}</span>\n{indent*6}</th>\n{indent*6}<td>\n{indent*7}{dataDesign1["Properties"][matrix]}\n{indent*6}</td>'
    pageProperties += f'\n{indent*6}<td>\n{indent*7}{dataDesign2["Properties"][matrix]}\n{indent*6}</td>\n{indent*5}</tr>' if dataDesign2 else f'\n{indent*5}</tr>'
  pageProperties += '''
        </tbody></table><p class="auto-cursor-target"><br/></p></ac:rich-text-body></ac:structured-macro>
'''
  del dataDesign1["Properties"], dataDesign1["Design"]		# delete "Properties" dictionary & "Design" item after use as its structure doesn't matches with other data in dataDesign1 dictionary
  if dataDesign2:
    del dataDesign2["Properties"], dataDesign2["Design"]        # delete "Properties" dictionary & "Design" item after use as its structure doesn't matches with other data in dataDesign2 dictionary
  pageData = ''
  for tableHeading in dataDesign1:
    if tableHeading in ["Detailed Setup Timing Info", "Detailed Hold Timing Info"]:
      """
        skip these tables as these tables are already included in Timing Summary heading
      """
      continue
    # ========== setting up table as expandable table ========== #
    tableData = f'\n{indent*2}<hr/>\n{indent*2}<br/>\n{indent*2}<ac:structured-macro ac:macro-id="c174ecce-f9ed-4784-8260-33c886a1562a" ac:name="expand" ac:schema-version="1">\n{indent*3}<ac:parameter ac:name="title">{tableHeading}</ac:parameter>\n{indent*3}<ac:rich-text-body>\n{indent*4}<div>\n{indent*5}<h2>{re.sub(" #[0-9]+$", "", tableHeading)}</h2>'
    # ========================================================== #
    # ========== adding new comparison table (if comparativePageID != None) ========== #
    if comparativePageID:
      tableData += f'\n{indent*5}<table class="relative-table wrapped" style="width: 100.0%;">\n{indent*6}<colgroup>\n{indent*7}<col style="width: 50%;"/>\n{indent*7}<col style="width: 50%;"/>\n{indent*6}</colgroup>\n{indent*6}<tr>\n{indent*7}<td>'
    # ================================================================================ #
    # ========== setting up the multiexcerpt macro to allow the reuse of this table in some other confluence page using multiexcerpt include macro ========== #
    tableData += f'\n{indent*8}<ac:structured-macro ac:macro-id="d0222fbb-cc8d-454c-9cbd-0b3797e5b079" ac:name="multiexcerpt" ac:schema-version="1">\n{indent*9}<ac:parameter ac:name="MultiExcerptName">{tableHeading}</ac:parameter>\n{indent*9}<ac:parameter ac:name="atlassian-macro-output-type">INLINE</ac:parameter>\n{indent*9}<ac:rich-text-body>'
    # ======================================================================================================================================================= #
    # ========== setting up advanced table macro so that each table inside it will have some common properties like sticky header row & header column etc. ========== #
    tableData += f'\n{indent*10}<ac:structured-macro ac:macro-id="52891836-5b7a-4cf2-8624-9dfa6c6f8f44" ac:name="table-plus" ac:schema-version="1">\n{indent*11}<ac:parameter ac:name="enableSorting">false</ac:parameter>\n{indent*11}<ac:parameter ac:name="applyColStyleToCell">true</ac:parameter>\n{indent*11}<ac:parameter ac:name="columnStyles">position: sticky; left: 0; top: auto;,,,,,,,,,,,,,,,,</ac:parameter>\n{indent*11}<ac:parameter ac:name="atlassian-macro-output-type">INLINE</ac:parameter>\n{indent*11}<ac:rich-text-body>'
    # =============================================================================================================================================================== #
    if tableHeading not in ["Post Synth Analysis", "Post Place Analysis", "Post Route Analysis"]:
      """
        create an empty place holders for table headings if this if condition becomes False
      """
      tableData += dict2table(tableDesign1=dataDesign1[tableHeading], nameDesign1=nameDesign1, tableDesign2=dataDesign2[tableHeading], nameDesign2=nameDesign2) if dataDesign2 else dict2table(tableDesign1=dataDesign1[tableHeading], nameDesign1=nameDesign1)
    # ========== closing tags for advanced table macro ========== #
    tableData += f'\n{indent*11}</ac:rich-text-body>\n{indent*10}</ac:structured-macro>'
    # =========================================================== #
    if tableHeading == "Timing Summary":
      for table in ["Detailed Setup Timing Info", "Detailed Hold Timing Info"]:
        tableData += f'\n{indent*12}<h3>{table}</h3>'
        if dataDesign2:
          # ========== adding new comparison table (if dataDesign2 != None) ========== #
          tableData += f'\n{indent*12}<table class="relative-table wrapped" style="width: 100.0%;">\n{indent*12}<colgroup>\n{indent*12}\n<col style="width: 50%;"/>\n{indent*12}<col style="width: 50%;"/>\n{indent*12}</colgroup>\n{indent*12}<tbody>\n{indent*12}<tr>\n{indent*12}<th>{nameDesign1}</th>\n{indent*12}<th>{nameDesign2}</th>\n{indent*12}</tr>\n{indent*12}<tr>\n{indent*12}<td>'
          # ========================================================================== #
        tableData += dict2table(tableDesign1=dataDesign1[table], nameDesign1=nameDesign1)
        if dataDesign2:
          # ========== adding table for dataDesign2[tableHeading] in 2nd column of comparison table + closing tags for comparison table (if dataDesign2 != None) ========== #
          tableData += f'\n{indent*12}</td>\n{indent*12}<td>{dict2table(tableDesign1=dataDesign2[table], nameDesign1=nameDesign2)}\n{indent*12}</td>\n{indent*12}</tr>\n{indent*12}</tbody>\n{indent*12}</table>'
          # =============================================================================================================================================================== #
    # ========== closing tags for multiexcerpt macro ========== #
    tableData += f'\n{indent*9}</ac:rich-text-body>\n{indent*8}</ac:structured-macro>'
    # ========================================================= #
    if comparativePageID:
      tableData += f'\n{indent*7}</td>'	# closing tags for comparison table data cell (if comparativePageID != None)
      comparativePage = confluence.get_page_by_id(comparativePageID)
      # ======== using multiexcerpt-include macro to show the table data from another design's analysis page ======== #
      tableData += f'\n{indent*7}<td>\n{indent*8}<ac:structured-macro ac:macro-id="ddcd15ea-f989-4b1d-a62c-1a249266e207" ac:name="multiexcerpt-include" ac:schema-version="1">\n{indent*9}<ac:parameter ac:name="SpaceWithExcerpt">\n{indent*10}<ri:space ri:space-key=\"{comparativePage["space"]["key"]}\"/>\n{indent*9}</ac:parameter>\n{indent*9}<ac:parameter ac:name="MultiExcerptName">{tableHeading}</ac:parameter>\n{indent*9}<ac:parameter ac:name="addpanel">true</ac:parameter>\n{indent*9}<ac:parameter ac:name="PageWithExcerpt">\n{indent*10}<ac:link>\n{indent*11}<ri:page ri:content-title=\"{comparativePage["title"]}\" ri:space-key=\"{comparativePage["space"]["key"]}\"/>\n{indent*10}</ac:link>\n{indent*9}</ac:parameter>\n{indent*8}</ac:structured-macro>\n{indent*7}</td>'
      # ============================================================================================================= #
      tableData += f'\n{indent*6}</tr>\n{indent*5}</table>'	# closing tags for comparison table
    # ========== closing tags for expandable table heading ========== #
    tableData += f'\n{indent*4}</div>\n{indent*3}</ac:rich-text-body>\n{indent*2}</ac:structured-macro>\n{indent*2}<br/>'
    # =============================================================== #
    pageData += tableData
  body = pageProperties + expandCollapseAll + pageIndex + pageData
  return body
def getAllData(directory):
  jsonData = {}
  filesExist = 0
  if not os.path.exists(directory):
    print("Warning: Directory %s doesn't exists !!!"%(directory))
    return jsonData
  else:
    jsonData["Properties"] = {
      "Date of the Run": " ",
      "Quartus Build": " ",
      "Device Part": " ",
      "Analyzed by": " ",
      "Suite Names": " ",
      "Ratio/Status in SPRITE": " ",
      "Metrics Analyzed": " ",
      "Analysis Summary": " ",
      "Jira links": " "
    }
    fitRpt = listDir(directory=directory, extension='.fit.rpt')
    powSmryRpt = listDir(directory=directory, extension='.pow.summary')
    staSmryRpt = listDir(directory=directory, extension='.sta.summary')
    staRpt = listDir(directory=directory, extension='.sta.rpt')
    flowRpt = listDir(directory=directory, extension='.flow.rpt')
    filesExist += 1 if fitRpt else 0
    filesExist += 1 if powSmryRpt else 0
    filesExist += 1 if staSmryRpt else 0
    filesExist += 1 if staRpt else 0
    filesExist += 1 if flowRpt else 0
    logFiles = listDir(directory=directory, extension='.log')
    if "vivado.log" in logFiles or "titan.log" in logFiles:
      sys.exit(f'Error: Can\'t accept design run path for vivado design. Error with {directory}')
    if not filesExist:
      sys.exit(f'Error: No files exist with extensions ".fit.rpt", ".pow.summary", ".sta.rpt", ".sta.summary" and ".flow.rpt".')
    jsonData["Resource Utilization"] = getUtilizationTable(f'{directory}/{fitRpt[0]}') if fitRpt else {}
    jsonData["Power"] = getPowerSummary(f'{directory}/{powSmryRpt[0]}') if powSmryRpt else {}
    jsonData["Timing Summary"] = getTimingSummary(f'{directory}/{staSmryRpt[0]}') if staSmryRpt else {}
    requiredTables=["Setup Summary of Paths", "Hold Summary of Paths"]
    tablesFromFile = getTablesFromFile(filepath=f'{directory}/{staRpt[0]}', requiredTables=requiredTables) if staRpt else {tableHeading:{} for tableHeading in requiredTables}
    newTables = {}
    for tableHeading in tablesFromFile:
      newTables[tableHeading] = {}
      if tablesFromFile[tableHeading]:
        newTables[tableHeading]["colHeads"] = ["Path"] + tablesFromFile[tableHeading]["colHeads"]
        colHead1 = newTables[tableHeading]["colHeads"][1]
        del tablesFromFile[tableHeading]["colHeads"]
        pathNum = 0
        for rowHeading in tablesFromFile[tableHeading]:
          pathNum += 1
          path = f'Path_#{pathNum}'
          newTables[tableHeading][path] = {colHead1: re.sub(" #\d+$", "", rowHeading)}
          newTables[tableHeading][path].update(tablesFromFile[tableHeading][rowHeading])
    tablesFromFile = newTables.copy()
    jsonData["Detailed Setup Timing Info"], jsonData["Detailed Hold Timing Info"] = tablesFromFile["Setup Summary of Paths"].copy(), tablesFromFile["Hold Summary of Paths"].copy()
    requiredTables=["Flow Elapsed Time"]
    tablesFromFile = getTablesFromFile(filepath=f'{directory}/{flowRpt[0]}', requiredTables=requiredTables) if flowRpt else {tableHeading:{} for tableHeading in requiredTables}
    jsonData["Runtime Summary"] = tablesFromFile["Flow Elapsed Time"].copy()
    jsonData.update({"Post Synth Analysis": {}, "Post Place Analysis": {}, "Post Route Analysis": {}})
    return jsonData

def getUtilizationTable(filepath):
  utilization = {}
  if not os.path.exists(filepath):                                      # check whether filepath exist or not
    print("Warning: File %s doesn't exists !!!"%(filepath))
    return utilization
  else:
    tablesFromFile = getTablesFromFile(filepath=filepath, requiredTables=["Fitter Summary", "Fitter Resource Usage Summary"])
    columnHeadings = ["Metric", "Used", "Total", "Percentage"]
    utilization = {"colHeads": columnHeadings.copy()}
    metrics = {
      "Fitter Summary": ["Logic utilization (in ALMs)", "Total dedicated logic registers", "Total pins", "Total block memory bits", "Total RAM Blocks", "Total DSP Blocks", "Total eSRAMs", "Total HSSI P-Tiles", "Total HSSI E-Tile Channels", "Total HSSI HPS", "Total HSSI EHIPs", "Total PLLs"],
      "Fitter Resource Usage Summary": ["-- Primary logic registers", "-- Secondary logic registers", "-- Hyper-Registers:"],
      "order": ["Logic utilization (in ALMs)", "Total dedicated logic registers", "-- Primary logic registers", "-- Secondary logic registers", "-- Hyper-Registers:", "Total pins", "Total block memory bits", "Total RAM Blocks", "Total DSP Blocks", "Total eSRAMs", "Total HSSI P-Tiles", "Total HSSI E-Tile Channels", "Total HSSI HPS", "Total HSSI EHIPs", "Total PLLs"]
    }
    for rowHeading in metrics["order"]:
      tableHeading = "Fitter Summary" if rowHeading in metrics["Fitter Summary"] else "Fitter Resource Usage Summary"
      if rowHeading == "-- Hyper-Registers:":
        utilization["-- Hyper-Registers"] = {}
      else:
        utilization[rowHeading] = {}
      try:
        tempStr = " ".join(tablesFromFile[tableHeading][rowHeading].values())
        utp = [num.replace(",", "") for num in re.findall("[0-9,.]+", tempStr)]
        if len(utp) == 1:
          utp = ["-", utp[0], "-"]
        elif not utp:
          utp = ["-"]*3
      except:
        utp = ["-"]*3
        print(f'Warning: Data not available for Utilization of row:{rowHeading} in table:{tableHeading} in file:{filepath}')
      for columnHeading, data in zip(columnHeadings[1:], utp):
        if rowHeading == "-- Hyper-Registers:":
          rowHeading = "-- Hyper-Registers"
        utilization[rowHeading][columnHeading] = data
    return utilization

def getTablesFromFile(filepath, requiredTables):
  """
    requiredTables contain the list of required table headings for which user wants data
    user must give table heading as per following rules -
      1. Table heading must be similar to heading in report file
         Ex: User must give table heading "Flow Elapsed Time" for following table -
             +------------------------------------------------------+
             ; Flow Elapsed Time                                    ;
             +-----------------+--------------+---------------------+
             ; Module Name     ; Elapsed Time ; Peak Virtual Memory ;
             +-----------------+--------------+---------------------+
             ; Synthesis       ; 00:58:41     ; 6145 MB             ;
             ; Fitter          ; 02:41:30     ; 29224 MB            ;
             ; Timing Analyzer ; 00:01:43     ; 16385 MB            ;
             ; Power Analyzer  ; 00:33:12     ; 21892 MB            ;
             ; Assembler       ; 00:01:38     ; 11451 MB            ;
             ; Total           ; 04:16:44     ; --                  ;
             +-----------------+--------------+---------------------+
      2. if table is related to Setup analysis then table heading will be "Setup <table heading>"
      3. if table is related to Hold analysis then table heading will be "Hold <table heading>"
      4. if multiple tables have same table heading in report file then table heading will be
         "<table heading>" if user want data for first occurence of table of heading=<table heading>
         in file, else "<table heading> #<n>" where number 'n' is the n th occurence of table of
         heading=<table heading>. So, 'n' will be in {2,3,4,...}
  """
  tablesFromFile = {}
  if not os.path.exists(filepath):                                      # check whether filepath exist or not
    print("Warning: File %s doesn't exists !!!"%(filepath))
    return tablesFromFile
  rF = False		# readFlag: to represent when to pick some data from file content
  sF, hF = False, False	# sF (setupFlag: to represent the upcoming data in file is related to Setup analysis), hF (holdFlag: to represent the upcoming data in file is related to Hold analysis)
  with open (filepath, 'r') as fd:
    content = fd.readlines()
    for lnum, line in enumerate(content):
      line = line.strip()
      patternCount = len(re.findall("[+][-]+", line))               # count of "+-------- ..." pattern in line
      # print(line, rF)
      # find for start of any table (+-------- ... --------+ line)
      if "Tcl Command:" in line:
        if "-setup" in content[lnum+1]:
          sF, hF = True, False
        elif "-hold" in content[lnum+1]:
          sF, hF = False, True
        else:
          sF, hF = False, False
      if patternCount == 1:
        rF = True # set readFlag at the starting of each table
        columnHeadings = []
      elif rF:
        listOfData = [data.strip() for data in line.split(";")[1:-1]]
        numOfColumns = len(listOfData)                              # number of columns in current line
        """
          for table data line will be like "; rowHeading ; data1 ; data2 ;"
          so, remove "" values from front & end after spliting the line by taking data of index [1, -1)
          strip() function will remove the extra unwanted space characters from data
          listOfData = [] if line.count(";") == 0
        """
        for i in range(len(listOfData)):
          listOfData[i] = listOfData[i].replace("<", "&lt;")
          listOfData[i] = listOfData[i].replace(">", "&gt;")
          """
            replacing angular brackets from data because these represent opening/closing of HTML tags in a HTML code
            these angular brackets will give an error if used other than opening/closing of tags
            instead HTML code accepts the character entity of angular brackets
          """
        if numOfColumns == 0 and len(re.findall("[+][-]+", content[lnum-1])) > 1:
          rF = False # clear readFlag at the end of each table
        elif numOfColumns == 1:	# line contains table heading
          if sF:
            tableHeading = f'Setup {listOfData[0]}'
          elif hF:
            tableHeading = f'Hold {listOfData[0]}'
          else:
            tableHeading = listOfData[0]
          tableHeading = validateDictKey(key=tableHeading, dictionary=tablesFromFile)
          """
            make tableHeading to be unique key in tablesFromFile
            if key with tableHeading already exist in tablesFromFile then add #number at the end to tableHeading
            so, tableHeading will become a unique key in tablesFromFile
          """
          if tableHeading not in requiredTables:
            rF = False # clear readFlag if tableHeading is not in the list of requiredTables
            continue
          tablesFromFile[tableHeading] = {}	# create new empty table of heading=tableHeading
        elif numOfColumns > 1:
          nextPatternCount = len(re.findall("[+][-]+", content[lnum+1]))
          lastPatternCount = len(re.findall("[+][-]+", content[lnum-1]))
          last3rdPatternCount = len(re.findall("[+][-]+", content[lnum-3]))
          if (nextPatternCount > 1) and (nextPatternCount == lastPatternCount) and (last3rdPatternCount == 1):	# line contains column headings
            columnHeadings = listOfData.copy()
            tablesFromFile[tableHeading]["colHeads"] = columnHeadings.copy()	# add columnHeadings to table of heading=tableHeading
          else:	# line contains row data
            rowHeading = listOfData[0]
            rowHeading = validateDictKey(key=rowHeading, dictionary=tablesFromFile[tableHeading])
            """ same reason for rowHeading as of tableHeading """
            tablesFromFile[tableHeading][rowHeading] = {}	# create new empty row of headinh=rowHeading
            if not columnHeadings:
              columnHeadings = ["Metric", "Value"]
              tablesFromFile[tableHeading]["colHeads"] = columnHeadings.copy()    # add columnHeadings to table of heading=tableHeading
            for columnHeading, data in zip(columnHeadings[1:], listOfData[1:]):
              tablesFromFile[tableHeading][rowHeading][columnHeading] = "-" if data == "" else data
  # print(json.dumps(tablesFromFile, indent=2))
  for tableHeading in requiredTables:
    if tableHeading not in tablesFromFile:
      tablesFromFile[tableHeading] = {}
  return tablesFromFile

def validateDictKey(key, dictionary):
  tempKey = key
  num = 1
  while tempKey in dictionary:
    num += 1
    tempKey = f'{key} #{num}'
  return tempKey

# get the data for summary table of power usage
def getPowerSummary(filepath):
  powerSummary = {}
  if not os.path.exists(filepath):                                      # check whether filepath exist or not
    print("Warning: File %s doesn't exists !!!"%(filepath))
    return powerSummary
  else:
    rowHeadings = ['Total Dynamic Power Dissipation', 'Total Static Power Dissipation', 'Total On-Chip Power Dissipation']
    with open (filepath, 'r') as fd:
      powerSummary["colHeads"] = ["Metric", "Value"]
      for line, rowHeading in itertools.product(fd.readlines(), rowHeadings):
        """
          This for loop is equivalent to-
          for line in fd.readlines():
            for rowHeading in rowHeadings:
        """
        if rowHeading in line:
          powerSummary[rowHeading] = {"Value": re.sub('\A.* : ', '', line.strip())}
    # print(json.dumps(powerSummary, indent=2))
    return powerSummary

# get the data for Timing summary table
def getTimingSummary(filepath):
  timingSummary = {}
  if not os.path.exists(filepath):                                      # check whether filepath exist or not
    print("Warning: File %s doesn't exists !!!"%(filepath))
    return timingSummary
  else:
    with open (filepath, 'r') as fd:
      timingSummary["colHeads"] = ["Type", "Slack", "TNS", "Corner"]
      for line in fd.readlines():
        listOfData = [data.strip() for data in line.split(":")]
        numOfColumns = len(listOfData)                              # number of columns in current line
        if numOfColumns == 2:
          columnHeading, data = listOfData.copy()
          if columnHeading == "Type":
            rowHeading = data
            timingSummary[rowHeading] = {}
          else:
            timingSummary[rowHeading][columnHeading] = data
    # print(json.dumps(timingSummary, indent=2))
    return timingSummary

# write extracted data to *.json file
def writeDataToJSON(jsonFile, data):
  with open (jsonFile, "w") as fr:
    # json.dump(data, fr)
    fr.write(json.dumps(data, indent = 2))
    fr.write("\n")
    fr.close()
  print("Created JSON file  %s"%jsonFile)

# read data from *.json file
def getJSONdata(jsonFile):
  if not os.path.exists(jsonFile):
    sys.exit("File %s doesn't exists"%jsonFile)
  else:
    with open (jsonFile, "r") as fr:
      data = json.load(fr)
  return data

# write data into file
def writeFile(filePath, data):
  with open (filePath, "w") as fw:
    fw.write(data)

# return a list of all the filenames (not filepaths) with specified extension in specified directory
def listDir(directory='./', extension=''):
  files = []
  for filename in os.listdir(directory):
    if filename.endswith(extension):
      files.append(filename)
  return files
